import apiClient from '../../../configs/axiosConfig';
import { getUserIdFromToken } from '../utils/auth';
import type { CardSet, FlashCard, CreateCardSetRequest, CreateCardSetWithFlashcardsRequest, UpdateCardSetRequest } from '../types';

const API_BASE_URL = 'http://localhost:8080/api/card-set';

/**
 * L·∫•y danh s√°ch card sets c·ªßa user hi·ªán t·∫°i
 */
export const getMyCardSets = async (): Promise<CardSet[]> => {
  try {
    const userId = getUserIdFromToken();
    
    if (!userId) {
      throw new Error('Kh√¥ng t√¨m th·∫•y user id trong token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    }

    console.log('üåê G·ªçi API l·∫•y card sets c·ªßa user:', userId);
    
    const response = await apiClient.get<CardSet[]>(`${API_BASE_URL}/my`, {
      params: { userId }
    });

    console.log('‚úÖ Nh·∫≠n ƒë∆∞·ª£c card sets:', response.data);
    
    return response.data;
  } catch (error: any) {
    console.error('‚ùå L·ªói khi l·∫•y card sets:', error);
    throw error;
  }
};

/**
 * L·∫•y th√¥ng tin chi ti·∫øt m·ªôt card set (bao g·ªìm flashcards)
 */
export const getCardSetById = async (id: string): Promise<CardSet> => {
  try {
    console.log('üåê G·ªçi API l·∫•y card set v·ªõi flashcards:', id);
    
    const response = await apiClient.get<CardSet>(`${API_BASE_URL}/${id}`);

    console.log('‚úÖ Nh·∫≠n ƒë∆∞·ª£c card set:', response.data);
    console.log('üìö S·ªë l∆∞·ª£ng flashcards:', response.data.flashcards?.length || 0);
    
    return response.data;
  } catch (error: any) {
    console.error('‚ùå L·ªói khi l·∫•y card set:', error);
    throw error;
  }
};

/**
 * T·∫°o card set m·ªõi
 */
export const createCardSet = async (data: CreateCardSetRequest): Promise<CardSet> => {
  try {
    const userId = getUserIdFromToken();
    
    if (!userId) {
      throw new Error('Kh√¥ng t√¨m th·∫•y user id trong token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    }

    console.log('üåê T·∫°o card set m·ªõi:', data);
    
    const response = await apiClient.post<CardSet>(`${API_BASE_URL}`, {
      ...data,
      userId
    });

    console.log('‚úÖ T·∫°o card set th√†nh c√¥ng:', response.data);
    
    return response.data;
  } catch (error: any) {
    console.error('‚ùå L·ªói khi t·∫°o card set:', error);
    throw error;
  }
};

/**
 * T·∫°o card set m·ªõi k√®m flashcards
 */
export const createCardSetWithFlashcards = async (data: CreateCardSetWithFlashcardsRequest): Promise<CardSet> => {
  try {
    console.log('üåê T·∫°o card set m·ªõi k√®m flashcards:', data);
    
    const response = await apiClient.post<CardSet>(`${API_BASE_URL}`, data);

    console.log('‚úÖ T·∫°o card set k√®m flashcards th√†nh c√¥ng:', response.data);
    
    return response.data;
  } catch (error: any) {
    console.error('‚ùå L·ªói khi t·∫°o card set k√®m flashcards:', error);
    throw error;
  }
};

/**
 * C·∫≠p nh·∫≠t card set
 */
export const updateCardSet = async (data: UpdateCardSetRequest): Promise<CardSet> => {
  try {
    console.log('üåê C·∫≠p nh·∫≠t card set:', data);
    
    const response = await apiClient.put<CardSet>(`${API_BASE_URL}/update`, {
      id: data.id,
      name: data.name,
      description: data.description,
    });

    console.log('‚úÖ C·∫≠p nh·∫≠t card set th√†nh c√¥ng:', response.data);
    
    return response.data;
  } catch (error: any) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t card set:', error);
    throw error;
  }
};

/**
 * X√≥a card set
 */
export const deleteCardSet = async (id: string): Promise<void> => {
  try {
    console.log('üåê X√≥a card set:', id);
    
    await apiClient.delete(`${API_BASE_URL}/${id}`);

    console.log('‚úÖ X√≥a card set th√†nh c√¥ng');
  } catch (error: any) {
    console.error('‚ùå L·ªói khi x√≥a card set:', error);
    throw error;
  }
};

/**
 * X√≥a flashcard
 */
export const deleteFlashcard = async (flashcardId: string): Promise<void> => {
  try {
    console.log('üåê X√≥a flashcard:', flashcardId);
    
    await apiClient.delete(`${API_BASE_URL}/flashcards/${flashcardId}`);

    console.log('‚úÖ X√≥a flashcard th√†nh c√¥ng');
  } catch (error: any) {
    console.error('‚ùå L·ªói khi x√≥a flashcard:', error);
    throw error;
  }
};

/**
 * T·∫°o flashcard m·ªõi
 */
export const createFlashcard = async (
  cardSetId: string, 
  data: { front: string; back: string }
): Promise<FlashCard> => {
  try {
    console.log('üåê T·∫°o flashcard m·ªõi:', data);
    
    const response = await apiClient.post<FlashCard>(
      `${API_BASE_URL}/${cardSetId}/flashcards`,
      data
    );

    console.log('‚úÖ T·∫°o flashcard th√†nh c√¥ng:', response.data);
    
    return response.data;
  } catch (error: any) {
    console.error('‚ùå L·ªói khi t·∫°o flashcard:', error);
    throw error;
  }
};

/**
 * C·∫≠p nh·∫≠t flashcard
 */
export const updateFlashcard = async (data: {
  id: string;
  front: string;
  back: string;
}): Promise<void> => {
  try {
    console.log('üåê C·∫≠p nh·∫≠t flashcard:', data);
    
    await apiClient.put(`${API_BASE_URL}/flashcards/update`, data);

    console.log('‚úÖ C·∫≠p nh·∫≠t flashcard th√†nh c√¥ng');
  } catch (error: any) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t flashcard:', error);
    throw error;
  }
};

