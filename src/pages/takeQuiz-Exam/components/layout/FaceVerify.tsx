import {
  CameraOutlined,
  CloseOutlined,
  CheckCircleOutlined,
  LoadingOutlined,
  ExclamationCircleOutlined,
  UserOutlined
} from "@ant-design/icons";
import { Button, Spin, message, Progress, Modal } from "antd";
import { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { uploadImageToImgBB } from "../../../../utils/ImageUpload";
import * as faceapi from "face-api.js";
import { getUserById } from "../../../userProfile/services/index";
import { getUserIdFromToken } from "../../../Room/utils/auth";
import { ContinuousFaceMonitor } from './ContinuousFaceMonitor';

interface FaceVerificationStepProps {
  onStart: (faceImageUrl: string, faceSimilarity: number, descriptor?: Float32Array) => void;
  onCancel: () => void;
}

export interface FaceVerificationResult {
  isVerified: boolean;
  distance: number;
  similarity: number; // Ph·∫ßn trƒÉm gi·ªëng nhau
  capturedImageUrl: string;
  referenceImageUrl: string;
  timestamp: string;
}

export function FaceVerificationStep({
  onStart,
  onCancel,
}: FaceVerificationStepProps) {
  const navigate = useNavigate();
  const [webcamError, setWebcamError] = useState<string | null>(null);
  const [isWebcamLoading, setIsWebcamLoading] = useState(true);
  const [showSuccessCircle, setShowSuccessCircle] = useState(false);
  const [isUploadingImage, setIsUploadingImage] = useState(false);
  const [capturedImageUrl, setCapturedImageUrl] = useState<string | null>(null);
  const [isLoadingModels, setIsLoadingModels] = useState(true);
  const [isVerifying, setIsVerifying] = useState(false);
  const [verificationProgress, setVerificationProgress] = useState(0);
  const [verificationResult, setVerificationResult] =
    useState<FaceVerificationResult | null>(null);
  const [showNoFaceModal, setShowNoFaceModal] = useState(false);
  const [examStarted, setExamStarted] = useState(false);
  const [isExamBlocked, setIsExamBlocked] = useState(false);

  const videoRef = useRef<HTMLVideoElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const referenceDescriptorRef = useRef<Float32Array | null>(null);
  const referenceImageUrlRef = useRef<string | null>(null);

  // ‚úÖ Load face-api.js models
  useEffect(() => {
    const loadModels = async () => {
      try {
        setVerificationProgress(10);
        console.log("üîÑ Loading face-api.js models...");

        await Promise.all([
          faceapi.nets.ssdMobilenetv1.loadFromUri("/models"),
          faceapi.nets.faceLandmark68Net.loadFromUri("/models"),
          faceapi.nets.faceRecognitionNet.loadFromUri("/models"),
        ]);

        setVerificationProgress(40);
        console.log("‚úÖ Models loaded successfully");
        setIsLoadingModels(false);
      } catch (error) {
        console.error("‚ùå Error loading models:", error);
        message.error("Kh√¥ng th·ªÉ t·∫£i models. Vui l√≤ng th·ª≠ l·∫°i.");
        setWebcamError("Kh√¥ng th·ªÉ t·∫£i models x√°c th·ª±c khu√¥n m·∫∑t.");
      }
    };

    loadModels();
  }, []);
  const exitVerify = () => {};

  useEffect(() => {
    const loadReferenceFace = async () => {
      if (isLoadingModels) return;

      try {
        setVerificationProgress(50);
        const userId = getUserIdFromToken();
        if (!userId) {
          throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
        }

        console.log("üîÑ Fetching user data for userId:", userId);
        const userData = await getUserById(userId);
        const faceUrl = userData.face;

        if (!faceUrl) {
          console.log("‚ùå User has no face image in system");
          setShowNoFaceModal(true);
          setIsLoadingModels(false);
          return;
        }

        referenceImageUrlRef.current = faceUrl;
        console.log("üîÑ Loading reference face from:", faceUrl);

        setVerificationProgress(70);

        // Load v√† ph√°t hi·ªán khu√¥n m·∫∑t t·ª´ ·∫£nh tham chi·∫øu
        const img = await faceapi.fetchImage(faceUrl);
        const detection = await faceapi
          .detectSingleFace(img, new faceapi.SsdMobilenetv1Options())
          .withFaceLandmarks()
          .withFaceDescriptor();

        if (!detection) {
          throw new Error(
            "Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t trong ·∫£nh tham chi·∫øu"
          );
        }

        referenceDescriptorRef.current = detection.descriptor;
        setVerificationProgress(100);
        console.log("‚úÖ Reference face loaded successfully");

        // Kh·ªüi ƒë·ªông webcam sau khi load xong reference face
        setTimeout(() => {
          startWebcam();
        }, 500);
      } catch (error) {
        console.error("‚ùå Error loading reference face:", error);
        message.error(
          error instanceof Error
            ? error.message
            : "Kh√¥ng th·ªÉ t·∫£i ·∫£nh tham chi·∫øu"
        );
        setWebcamError("Kh√¥ng th·ªÉ t·∫£i ·∫£nh khu√¥n m·∫∑t tham chi·∫øu t·ª´ h·ªá th·ªëng.");
      }
    };

    loadReferenceFace();
  }, [isLoadingModels]);

  const startWebcam = async () => {
    try {
      setIsWebcamLoading(true);
      setWebcamError(null);

      console.log("üîÑ Starting webcam...");

      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          width: { ideal: 640 },
          height: { ideal: 480 },
          facingMode: "user",
        },
        audio: false,
      });

      streamRef.current = stream;

      if (videoRef.current) {
        videoRef.current.srcObject = stream;

        // ‚úÖ Th√™m event listener ƒë·ªÉ ƒë·ª£i video s·∫µn s√†ng
        videoRef.current.onloadedmetadata = async () => {
          try {
            await videoRef.current?.play();
            console.log("‚úÖ Webcam started and playing");
            setIsWebcamLoading(false);
          } catch (playError) {
            console.error("‚ùå Error playing video:", playError);
            setWebcamError("Kh√¥ng th·ªÉ ph√°t video t·ª´ camera.");
            setIsWebcamLoading(false);
          }
        };

        // ‚úÖ Fallback: N·∫øu video ƒë√£ c√≥ metadata r·ªìi
        if (videoRef.current.readyState >= 2) {
          await videoRef.current.play();
          console.log("‚úÖ Webcam started and playing (fallback)");
          setIsWebcamLoading(false);
        }
      }
    } catch (error) {
      console.error("‚ùå Error accessing webcam:", error);
      setWebcamError(
        "Kh√¥ng th·ªÉ truy c·∫≠p webcam. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p camera."
      );
      setIsWebcamLoading(false);
    }
  };

  const stopWebcam = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach((track) => track.stop());
      streamRef.current = null;
    }
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
  };

  // ‚úÖ Capture v√† verify khu√¥n m·∫∑t
  const captureAndVerifyImage = async (): Promise<{
    imageFile: File;
    verificationResult: FaceVerificationResult;
  }> => {
    return new Promise(async (resolve, reject) => {
      if (!videoRef.current) {
        reject(new Error("Video not available"));
        return;
      }

      if (!referenceDescriptorRef.current || !referenceImageUrlRef.current) {
        reject(new Error("Reference face not loaded"));
        return;
      }

      try {
        const video = videoRef.current;

        // ‚úÖ Ph√°t hi·ªán khu√¥n m·∫∑t trong video
        console.log("üîÑ Detecting face in video...");
        const detection = await faceapi
          .detectSingleFace(video, new faceapi.SsdMobilenetv1Options())
          .withFaceLandmarks()
          .withFaceDescriptor();

        if (!detection) {
          reject(
            new Error(
              "Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t. Vui l√≤ng ƒë·∫£m b·∫£o khu√¥n m·∫∑t c·ªßa b·∫°n trong khung h√¨nh."
            )
          );
          return;
        }

        console.log("‚úÖ Face detected in video");

        // ‚úÖ So s√°nh v·ªõi ·∫£nh tham chi·∫øu
        const distance = faceapi.euclideanDistance(
          referenceDescriptorRef.current,
          detection.descriptor
        );

        // Threshold: 0.6 (c√†ng nh·ªè c√†ng gi·ªëng)
        const threshold = 0.6;
        const isVerified = distance < threshold;
        const similarity = Math.max(0, (1 - distance) * 100); // Convert to percentage

        console.log("üìä Verification result:", {
          distance,
          similarity: similarity.toFixed(2) + "%",
          isVerified,
          threshold,
        });

        if (!isVerified) {
          reject(
            new Error(
              `X√°c th·ª±c kh√¥ng th√†nh c√¥ng. ƒê·ªô t∆∞∆°ng ƒë·ªìng: ${similarity.toFixed(
                1
              )}% (y√™u c·∫ßu >= ${((1 - threshold) * 100).toFixed(0)}%)`
            )
          );
          return;
        }

        // ‚úÖ Capture ·∫£nh t·ª´ video
        const canvas = document.createElement("canvas");
        canvas.width = video.videoWidth || 640;
        canvas.height = video.videoHeight || 480;

        const ctx = canvas.getContext("2d");
        if (!ctx) {
          reject(new Error("Cannot get canvas context"));
          return;
        }

        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        // ‚úÖ V·∫Ω khung xanh quanh khu√¥n m·∫∑t
        const box = detection.detection.box;
        ctx.strokeStyle = "green";
        ctx.lineWidth = 3;
        ctx.strokeRect(box.x, box.y, box.width, box.height);
        ctx.fillStyle = "green";
        ctx.font = "20px Arial";
        ctx.fillText(`Verified (${similarity.toFixed(1)}%)`, box.x, box.y - 10);

        canvas.toBlob(
          (blob) => {
            if (!blob) {
              reject(new Error("Failed to capture image"));
              return;
            }

            const file = new File(
              [blob],
              `face-verification-${Date.now()}.jpg`,
              {
                type: "image/jpeg",
              }
            );

            const verificationResult: FaceVerificationResult = {
              isVerified: true,
              distance,
              similarity,
              capturedImageUrl: "", // S·∫Ω update sau khi upload
              referenceImageUrl: referenceImageUrlRef.current!,
              timestamp: new Date().toISOString(),
            };

            resolve({ imageFile: file, verificationResult });
          },
          "image/jpeg",
          0.95
        );
      } catch (error) {
        reject(error);
      }
    });
  };

  // ‚úÖ X·ª≠ l√Ω khi nh·∫•n n√∫t ch·ª•p ·∫£nh
  const handleCapturePhoto = async () => {
    if (isLoadingModels || !referenceDescriptorRef.current) {
      message.error("H·ªá th·ªëng ch∆∞a s·∫µn s√†ng. Vui l√≤ng ƒë·ª£i...");
      return;
    }

    try {
      setIsVerifying(true);
      setIsUploadingImage(true);
      message.loading({ content: "ƒêang x√°c th·ª±c khu√¥n m·∫∑t...", key: "verify" });

      // ‚úÖ Capture v√† verify
      const { imageFile, verificationResult } = await captureAndVerifyImage();
      console.log("‚úÖ Face verified successfully:", verificationResult);

      message.loading({ content: "ƒêang t·∫£i ·∫£nh l√™n...", key: "verify" });

      // ‚úÖ Upload l√™n ImgBB
      const imageUrl = await uploadImageToImgBB(imageFile);
      console.log("‚úÖ Image uploaded to ImgBB:", imageUrl);

      // ‚úÖ Update verification result v·ªõi URL
      const finalResult: FaceVerificationResult = {
        ...verificationResult,
        capturedImageUrl: imageUrl,
      };

      message.success({
        content: `X√°c th·ª±c th√†nh c√¥ng! ƒê·ªô t∆∞∆°ng ƒë·ªìng: ${verificationResult.similarity.toFixed(
          1
        )}%`,
        key: "verify",
        duration: 3,
      });

      setCapturedImageUrl(imageUrl);
      setVerificationResult(finalResult);
      setShowSuccessCircle(true);

      // D·ª´ng camera sau khi x√°c th·ª±c th√†nh c√¥ng
      setTimeout(() => {
        stopWebcam();
      }, 500);
    } catch (error) {
      console.error("‚ùå Error in verification:", error);
      message.error({
        content: error instanceof Error ? error.message : "X√°c th·ª±c th·∫•t b·∫°i",
        key: "verify",
        duration: 5,
      });
    } finally {
      setIsVerifying(false);
      setIsUploadingImage(false);
    }
  };

  // ‚úÖ X·ª≠ l√Ω khi nh·∫•n n√∫t ti·∫øp t·ª•c
  const handleContinue = () => {
    if (!capturedImageUrl || !verificationResult) {
      message.error("Ch∆∞a c√≥ d·ªØ li·ªáu x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i.");
      return;
    }

    console.log("‚úÖ Starting exam with continuous monitoring");

    // B·∫Øt ƒë·∫ßu gi√°m s√°t
    setExamStarted(true);

    console.log("‚úÖ Continuing with verification result:", verificationResult);
    onStart(capturedImageUrl, verificationResult.similarity, referenceDescriptorRef.current || undefined);
  };

  // Th√™m handler cho blocking
  const handleExamBlock = () => {
    setIsExamBlocked(true);
    message.error({
      content: "B√†i thi ƒë√£ b·ªã kh√≥a do vi ph·∫°m quy ƒë·ªãnh gi√°m s√°t!",
      duration: 0,
    });

    // TODO: G·ªçi API ƒë·ªÉ log violation v√† t·ª± ƒë·ªông n·ªôp b√†i
    // autoSubmitExam();
  };

  const handleCancel = () => {
    stopWebcam();
    setCapturedImageUrl(null);
    setShowSuccessCircle(false);
    setVerificationResult(null);
    onCancel();
  };

  const handleRetry = () => {
    setCapturedImageUrl(null);
    setShowSuccessCircle(false);
    setVerificationResult(null);
    setIsUploadingImage(false);
    setIsVerifying(false);
    startWebcam();
  };

  const handleGoToProfile = () => {
    navigate("/user-profile");
    onCancel();
  };

  const handleCloseNoFaceModal = () => {
    setShowNoFaceModal(false);
    onCancel();
  };

  // ‚úÖ Hi·ªÉn th·ªã loading khi ƒëang t·∫£i models
  if (isLoadingModels) {
    return (
      <div className="fixed inset-0 !bg-[rgba(83,83,83,0.62)] flex items-center justify-center z-50">
        <div className="!bg-white rounded-[18px] w-[500px] p-12">
          <h2 className="text-center text-[28px] font-bold text-black mb-8">
            ƒêang kh·ªüi t·∫°o h·ªá th·ªëng x√°c th·ª±c
          </h2>
          <div className="flex flex-col items-center gap-4">
            <Spin size="large" />
            <Progress
              percent={verificationProgress}
              status="active"
              strokeColor={{
                "0%": "#108ee9",
                "100%": "#87d068",
              }}
            />
            <p className="text-gray-600 text-center">
              ƒêang t·∫£i m√¥ h√¨nh nh·∫≠n di·ªán khu√¥n m·∫∑t...
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 !bg-[rgba(83,83,83,0.62)] flex items-center justify-center z-50">
      <div className="!bg-white rounded-[18px] w-[997px] relative p-12">
        <button
          onClick={handleCancel}
          className="absolute top-8 right-8 p-2 hover:bg-gray-100 rounded-lg transition-colors"
        >
          <CloseOutlined className="!text-red-500 text-2xl" />
        </button>

        <h2 className="text-center text-[36px] font-bold text-black mt-8">
          {showSuccessCircle ? "X√°c minh th√†nh c√¥ng" : "X√°c th·ª±c khu√¥n m·∫∑t"}
        </h2>

        <div className="mx-auto mt-16 w-full h-[580px] !bg-[#33363f] rounded-[11px] flex items-center justify-center relative overflow-hidden">
          {/* Loading state */}
          {isWebcamLoading && (
            <div className="absolute inset-0 flex flex-col items-center justify-center gap-4 z-10">
              <Spin size="large" />
              <p className="text-white text-lg">ƒêang kh·ªüi ƒë·ªông camera...</p>
            </div>
          )}

          {/* Error state */}
          {webcamError && (
            <div className="absolute inset-0 flex flex-col items-center justify-center text-white p-4 z-10">
              <CameraOutlined className="mb-4 text-red-400 text-6xl" />
              <p className="text-center text-lg mb-4">{webcamError}</p>
              <Button
                onClick={handleRetry}
                className="!bg-blue-500 hover:!bg-blue-600 !text-white"
                size="large"
              >
                Th·ª≠ l·∫°i
              </Button>
            </div>
          )}

          {/* Video stream */}
          {!showSuccessCircle && (
            <video
              ref={videoRef}
              autoPlay // ‚úÖ Th√™m autoPlay
              playsInline // ‚úÖ Th√™m playsInline (quan tr·ªçng cho mobile)
              muted // ‚úÖ Th√™m muted
              width="640" // ‚úÖ Th√™m width/height c·ªë ƒë·ªãnh
              height="480"
              className={`w-full h-full object-cover transition-all duration-300 ${
                isUploadingImage || isVerifying ? "blur-sm" : ""
              }`}
              style={{ display: "block" }} // ‚úÖ Th√™m display block
            />
          )}

          {/* Canvas ƒë·ªÉ v·∫Ω face detection (n·∫øu c·∫ßn) */}
          <canvas
            ref={canvasRef}
            className="absolute top-0 left-0 w-full h-full pointer-events-none"
            style={{ display: "none" }}
          />

          {/* Uploading/Verifying overlay */}
          {(isUploadingImage || isVerifying) && (
            <div className="absolute inset-0 bg-black/40 backdrop-blur-md rounded-[11px] flex flex-col items-center justify-center gap-4 z-10">
              <LoadingOutlined className="text-6xl text-blue-400 animate-spin" />
              <p className="text-white text-xl font-semibold">
                {isVerifying
                  ? "ƒêang x√°c th·ª±c khu√¥n m·∫∑t..."
                  : "ƒêang t·∫£i ·∫£nh l√™n..."}
              </p>
            </div>
          )}

          {/* Success overlay */}
          {showSuccessCircle && (
            <div className="absolute inset-0 flex flex-col items-center justify-center bg-black/30 gap-4 z-10">
              <div
                style={{
                  animation: `scaleInLarge 0.8s ease-out`,
                }}
              >
                <CheckCircleOutlined className="text-9xl !text-green-400 drop-shadow-lg" />
              </div>
              {verificationResult && (
                <div className="bg-white/90 rounded-lg p-4 text-center">
                  <p className="text-lg font-semibold text-green-600">
                    ƒê·ªô t∆∞∆°ng ƒë·ªìng: {verificationResult.similarity.toFixed(1)}%
                  </p>
                </div>
              )}
            </div>
          )}

          {/* Camera ready indicator */}
          {!webcamError &&
            !showSuccessCircle &&
            !isUploadingImage &&
            !isWebcamLoading &&
            !isVerifying && (
              <div className="absolute bottom-8 left-1/2 -translate-x-1/2 !bg-[rgba(240,240,240,0.22)] rounded-[12px] p-3 flex flex-col items-center justify-center backdrop-blur-sm z-10">
                <CameraOutlined className="text-xl !text-white" />
                <span className="text-white text-sm mt-1">S·∫µn s√†ng</span>
              </div>
            )}

          {examStarted && referenceDescriptorRef.current && (
            <ContinuousFaceMonitor
              referenceDescriptor={referenceDescriptorRef.current}
              onBlock={handleExamBlock}
              enabled={!isExamBlocked}
            />
          )}
        </div>

        <div className="flex justify-center gap-4 mt-12">
          <Button
            onClick={handleCancel}
            disabled={isUploadingImage || showSuccessCircle || isVerifying}
            className="!bg-[#ff2e00] hover:!bg-[#e02900] !text-white rounded-[12px] h-[50px] !px-12 text-[20px]"
          >
            H·ªßy
          </Button>

          {!isWebcamLoading &&
            !webcamError &&
            !capturedImageUrl &&
            !showSuccessCircle && (
              <Button
                onClick={handleCapturePhoto}
                loading={isUploadingImage || isVerifying}
                disabled={isUploadingImage || isVerifying || isLoadingModels}
                className="!bg-[#6392e9] hover:!bg-[#5282d8] !text-white rounded-[12px] h-[50px] !px-12 text-[20px]"
                icon={
                  !isUploadingImage && !isVerifying ? (
                    <CameraOutlined />
                  ) : undefined
                }
              >
                {isVerifying
                  ? "ƒêang x√°c th·ª±c..."
                  : isUploadingImage
                  ? "ƒêang x·ª≠ l√Ω..."
                  : "Ch·ª•p ·∫£nh & X√°c th·ª±c"}
              </Button>
            )}

          {capturedImageUrl && showSuccessCircle && verificationResult && (
            <Button
              onClick={handleContinue}
              className="!bg-[#6392e9] hover:!bg-[#5282d8] !text-white rounded-[12px] h-[50px] !px-12 text-[20px]"
            >
              Ti·∫øp t·ª•c l√†m b√†i
            </Button>
          )}
        </div>
      </div>

      <style>{`
        @keyframes scaleInLarge {
          from {
            transform: scale(0.5);
            opacity: 0;
          }
          to {
            transform: scale(1);
            opacity: 1;
          }
        }
      `}</style>

      {/* Modal c·∫£nh b√°o kh√¥ng c√≥ ·∫£nh khu√¥n m·∫∑t */}
      <Modal
        open={showNoFaceModal}
        onCancel={handleCloseNoFaceModal}
        footer={null}
        centered
        width={500}
        closable={false}
        maskClosable={false}
      >
        <div className="text-center py-8">
          <ExclamationCircleOutlined className="text-6xl text-orange-500 mb-6" />
          <h3 className="text-2xl font-bold text-gray-800 mb-4">
            Ch∆∞a c√≥ ·∫£nh khu√¥n m·∫∑t
          </h3>
          <p className="text-gray-600 mb-8 text-lg leading-relaxed">
            B·∫°n ch∆∞a c√≥ ·∫£nh khu√¥n m·∫∑t trong h·ªá th·ªëng. Vui l√≤ng c·∫≠p nh·∫≠t ·∫£nh
            khu√¥n m·∫∑t trong h·ªì s∆° c√° nh√¢n ƒë·ªÉ c√≥ th·ªÉ tham gia b√†i thi v·ªõi x√°c
            th·ª±c khu√¥n m·∫∑t.
          </p>
          <div className="flex gap-4 justify-center">
            <Button
              onClick={handleCloseNoFaceModal}
              className="!bg-gray-500 hover:!bg-gray-600 !text-white rounded-lg h-12 !px-8"
            >
              H·ªßy
            </Button>
            <Button
              onClick={handleGoToProfile}
              className="!bg-blue-500 hover:!bg-blue-600 !text-white rounded-lg h-12 !px-8"
              icon={<UserOutlined />}
            >
              C·∫≠p nh·∫≠t ·∫£nh khu√¥n m·∫∑t
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
}
