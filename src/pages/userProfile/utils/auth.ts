// Ti·ªán √≠ch gi·∫£i m√£ JWT d√†nh cho module userProfile
// H·ªçc theo c√°ch l√†m ·ªü Room/utils/auth.ts ƒë·ªÉ tr√°nh ph·ª• thu·ªôc ch√©o gi·ªØa c√°c module

/**
 * Gi·∫£i m√£ JWT t·ª´ localStorage v√† l·∫•y userId
 */
export const getUserIdFromToken = (): string | null => {
  const token = localStorage.getItem("token")
  console.log("üé´ Token t·ª´ localStorage:", token ? "C√≥ token" : "Kh√¥ng c√≥ token")
  
  if (!token) {
    console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y token trong localStorage")
    return null
  }

  try {
    const payload = token.split('.')[1]
    const decoded = JSON.parse(atob(payload))
    console.log("üîì Decoded token:", decoded)
    console.log("üÜî UserId t·ª´ token:", decoded.userId)
    return decoded.userId || null
  } catch (error) {
    console.error("‚ùå L·ªói gi·∫£i m√£ token:", error)
    return null
  }
}

/**
 * Gi·∫£i m√£ JWT v√† l·∫•y username (h√†m h·ªó tr·ª£, c√≥ th·ªÉ kh√¥ng d√πng)
 */
export const getUsernameFromToken = (): string | null => {
  const token = localStorage.getItem("token")
  if (!token) return null

  try {
    const payload = token.split('.')[1]
    const decoded = JSON.parse(atob(payload))
    return decoded.username || null
  } catch (error) {
    console.error("L·ªói gi·∫£i m√£ token:", error)
    return null
  }
}

/**
 * C√°ch gi·∫£i m√£ Base64URL an to√†n h∆°n ƒë·ªÉ l·∫•y fullName (v√≠ d·ª• minh ho·∫°)
 */
export const getFullNameFromToken = (): string | null => {
  const token = localStorage.getItem("token")
  if (!token) return null

  try {
    const payload = token.split('.')[1]
    const base64 = payload.replace(/-/g, '+').replace(/_/g, '/')
    const jsonPayload = JSON.parse(
      new TextDecoder().decode(
        Uint8Array.from(atob(base64), c => c.charCodeAt(0))
      )
    )
    return jsonPayload.fullName || null
  } catch (error) {
    console.error("L·ªói gi·∫£i m√£ token:", error)
    return null
  }
}


